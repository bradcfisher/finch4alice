{"name":"Finch 4 Alice","tagline":"Provides an API within Alice 3 for interacting with a Finch robot","body":"\r\n# Finch 4 Alice\r\n\r\nEver wanted to control your [Finch robot](http://www.finchrobot.com/) from within [Alice 3](http://www.alice.org/)?  Well, now you can!\r\n\r\nFinch 4 Alice provides a simple extension to Alice 3 that adds methods for controlling a Finch robot to all Transport subclass instances.\r\n\r\n## Building\r\n\r\nYou can build the Jar only for manual installation, or create several types of installers.\r\n\r\n### Prerequisites\r\n\r\n#### Alice 3\r\n\r\nYou must have an installation of Alice 3 on the build machine, preferrably installed in the default location.  This location varies by platform, as shown in the following table:\r\n\r\n| Platform | Default Installation Location |\r\n| -------- | ----------------------------- |\r\n| Windows  | C:\\Program Files\\Alice 3      |\r\n| Linux    | ~/Alice3/lib                  |\r\n| Max OS X | ~/Alice3/lib                  |\r\n\r\n#### JDK\r\n\r\nYou must have the Java Development Kit (JDK) version 1.7 or newer installed and properly configured.  You can obtain a copy of the JDK [from Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html), or from a distribution provided by your operating system vendor.  OpenJDK should work fine, if you don't feel like using the Oracle proprietary JDK.\r\n\r\n### Building the Jar file only\r\n\r\nIf Alice 3 is installed in the default location, executing the following command from within the project folder will build the Jar file.\r\n\r\n```\r\n./gradlew jar\r\n```\r\n\r\nIf Alice is installed in a non-standard path, you can specify the correct path by providing it via the `aliceLibDir` command-line property value as follows:\r\n\r\n```\r\n./gradlew jar -PaliceLibDir=/path/to/alice3/lib\r\n```\r\n\r\n### Building the installers\r\n\r\n#### Multi-platform / Windows\r\n\r\nThis type of installer is the easiest to use for most end-users.  It provides an intuitive window-based installer that walks users through the installation process, and will run on all of the supported platforms.\r\n\r\n```\r\n./gradlew izpack\r\n```\r\n\r\n\r\n#### RPM package\r\n\r\nUsers of Redhat Enterprise Linux or Fedora Linux may prefer to use RPM to install.  To generate a suitable RPM package:\r\n\r\n```\r\n./gradlew buildRpm\r\n```\r\n\r\nThe generated RPM can be found under `build/distributions/`.\r\n\r\nYou can install the generated package using `rpm`, as shown below:\r\n\r\n```\r\nrpm -ivh build/distributions/finch4alice_0.1_noarch.rpm\r\n```\r\n\r\nOR, if you have already installed a previous version, use the upgrade command.  This is also safe to run if you haven't yet installed the package.\r\n\r\n```\r\nrpm -Uvh build/distributions/finch4alice_0.1_noarch.rpm\r\n```\r\n\r\nTo install using `yum` and for distribution to multiple machines, it is recommended that you set up a local yum repository server.\r\n\r\n> Note that the generated package will only install into the same folder structure as Alice is installed under on the build machine.  Since Alice is generally installed to each user's home directory, this type of packaging will generally not be the best option.  However, if you wish to install Alice in a system-wide configuration on multiple machines, this may be the route to go.\r\n\r\n#### Debian (DEB) package\r\n\r\nIf you run a Debian-based system and prefer installing via `apt`, then this may be the installation type for you.  You can build a Debian package by running the following command:\r\n\r\n```\r\n./gradlew buildDeb\r\n```\r\n\r\nThe generated DEB can be found under `build/distributions/`.\r\n\r\nYou can install the generated package using `dpkg`, as shown below:\r\n\r\n```\r\ndpkg -i build/distributions/finch4alice_0.1_all.deb\r\n```\r\n\r\nTo install using `apt` and for distribution to multiple machines, it is recommended that you set up a local apt cache repository.  One such option is to use [reprepro](https://mirrorer.alioth.debian.org/).\r\n\r\n> As stated above for the RPM package, the generated Debian paclage will only install into the same folder structure as Alice is installed under on the build machine.  Since Alice is generally installed to each user's home directory, this type of packaging will generally not be the best option.  However, if you wish to install Alice in a system-wide configuration on multiple machines, this may be the route to go.\r\n\r\n## Manual installation\r\n\r\nIf for some reason the generated installers don't work for your particular situation, or you simply enjoy getting into the nitty gritty aspects of software hacking, then this is the section for you.\r\n\r\nTo manually install Finch 4 Alice:\r\n\r\n1. First build the Jar as described above under [Building the Jar file only](#building-the-jar-file-only).\r\n2. Copy the generated Jar file from the build directory into the Alice `ext` directory\r\n```\r\nmkdir /path/to/alice/ext/finch4alice\r\ncp ./build/finch4alice-0.1.jar /path/to/alice/ext/finch4alice\r\n```\r\n3. Create an Install4J configuration to instruct Alice to load the new Jar.\r\n  * For Windows, copy the file `src/resources/Alice 3.vmoptions.windows` into the Alice main folder and rename it to `Alice 3.vmoptions`.\r\n  * For Linux and Mac OS X:\r\n```\r\ncp \"src/resources/Alice 3.vmoptions.linux\" \"/path/to/alice/Alice 3.vmoptions\"\r\n```\r\n\r\n## Using Finch 4 Alice\r\n\r\n### Confirming installation\r\n\r\nTo ensure that everything is installed and configured properly:\r\n\r\n1. Launch Alice\r\n2. When prompted, create a new empty project (eg. select 'GRASS' from under the 'Blank Slates' tab)\r\n\r\nTODO: image here\r\n\r\n3. Select the `Help -> Show System Properties` menu\r\n\r\nTODO: image here\r\n\r\n4. Click `Show...` to the right of `java.class.path`\r\n\r\nTODO: image here\r\n\r\n5. Verify that the finch4alice jar is listed at the beginning of the class path.\r\n\r\nTODO: image here\r\n\r\n### Connecting to a Finch\r\n\r\nTODO: Provide a simple example of how to interact with a connected Finch robot\r\n\r\n### Additions to the STransport API\r\n\r\nFinch 4 Alice works by extending the STransport parent class within Alice.  Several new procedures and functions are added that expose the full range of functionality provided by the Finch robot.\r\n\r\n#### Finch procedures\r\n\r\n`finchBuzz(int frequency, int duration)`\r\n\r\n`finchPlayRTTTL(String rtttl, double frequencyMultiplier, double durationMultiplier, boolean useComputerSpeakers)`\r\n\r\n`finchSetLED(int red, int green, int blue)`\r\n\r\n`finchSetWheelVelocities(int leftVelocity, int rightVelocity)`\r\n\r\n`finchStopWheels()`\r\n\r\n\r\n\r\n#### Finch functions\r\n\r\n`int[] finchGetLightSensors()`\r\n\r\n`int finchGetLeftLightSensor()`\r\n\r\n`int finchGetRightLightSensor()`\r\n\r\n`boolean finchIsLeftLightSensor(int limit)`\r\n\r\n`boolean finchIsRightLightSensor(int limit)`\r\n\r\n`double finchGetXAcceleration()`\r\n\r\n`double finchGetYAcceleration()`\r\n\r\n`double finchGetZAcceleration()`\r\n\r\n`boolean finchIsBeakDown()`\r\n\r\n`boolean finchIsBeakUp()`\r\n\r\n`boolean finchIsLevel()`\r\n\r\n`boolean finchIsUpsideDown()`\r\n\r\n`boolean finchIsLeftWingDown()`\r\n\r\n`boolean finchIsRightWingDown()`\r\n\r\n### Debugging and Logging\r\n\r\nTODO: Add some details on debugging and logging here\r\n\r\n## Disclaimers & License\r\n\r\nThe Finch 4 Alice project is not affiliated with either the Finch or Alice 3 projects or their respective intellectual property holders.\r\n\r\nThe Finch robot is produced by [BirdBrain Technologies LLC](http://www.birdbraintechnologies.com/).\r\n\r\nAlice 3 is developed by [Carnegie Mellon University](http://www.cs.cmu.edu/).\r\n\r\nThis software interacts with the [BirdBrain Robot Server](https://github.com/BirdBrainTechnologies/BirdBrainRobotServer) which is covered by a [Creative Commons Attribution-ShareAlike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/).\r\n\r\n---\r\n\r\nFinch 4 Alice is released under the BSD 2-Clause License\r\n\r\nCopyright (c) 2015, Brad Fisher  \r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n\r\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","google":"UA-71822812-1","note":"Don't delete this file! It's used internally to help with page regeneration."}