
plugins {
	id "java"
	id "com.bmuschko.izpack" version "2.1"	// For building cross-platform installer
	id "org.ajoberstar.github-pages" version "1.4.2"
	id 'edu.sc.seis.launch4j' version '1.6.2'
	id 'com.github.ben-manes.versions' version '0.13.0'
}

version = "0.3-SNAPSHOT"
ext.title = "Finch 4 Alice"
description = "Enhances Alice 3.2 STransport subclasses to include methods for interacting with the Finch robot"

//sourceCompatibility = 1.7

detectAliceDir()

repositories {
	jcenter()
	
	maven {
		// For IcePDF distributions
		name "Ice Maven Release Repository"
		url "http://anonsvn.icesoft.org/repo/maven2/releases" 
	}
	
}

// Ensure the Java compilation tasks perform extra checks on the code
tasks.withType(JavaCompile) {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

/**
 * Attempts to determine the root path of an Alice 3 installation.
 *
 * The path returned may be specified on the command line by passing -PaliceDir=/path/to/alice3
 * Otherwise, the following OS-specific defaults will be used:
 *   Windows: C:\Program Files\Alice 3
 *   Linux: ~/Alice3
 *   Mac OSX: /Applications/Alice 3.app/Contents/Resources/app
 */
void detectAliceDir() {
	def rv = null
	if (project.hasProperty('aliceDir')) {
		rv = project.aliceDir;
	} else {
		def os = org.gradle.internal.os.OperatingSystem.current()
		if (os.isWindows()) {
			rv = "C:\\Program Files\\Alice 3"
		} else if (os.isMacOsX()) {
			rv = "/Applications/Alice 3.app/Contents/Resources/app"
		} else if (os.isUnix()) {
			rv = System.getProperty("user.home") +"/Alice3"
		}
	}

	verifyAliceDir(rv)

	println "Alice installation detected at $aliceDir"
} // detectAliceDir

/**
 * Checks the specified path and ensures that it appears to be an Alice installation.
 * This method verifies the path exists, and that it contains two subfolders: 'lib' and 'ext'.
 * As a side-effect, this method also sets an aliceDir (if not already set) and an aliceLibDir
 * property on the project.
 * @param	path	The path to verify.
 */
void verifyAliceDir(String path) {
	if (!file("$path").exists())
		throw new java.io.FileNotFoundException("The specified Alice dir doesn't exist: $path")

	def libDir = file("$path/lib").getAbsolutePath()

	if (!file(libDir).exists())
		throw new java.io.FileNotFoundException("The Alice 'lib' dir doesn't exist: $libDir")

	if (fileTree(dir: libDir, include: '*.jar').size() == 0)
		throw new java.io.FileNotFoundException("The Alice 'lib' dir doesn't contain any Jar files: $libDir")

	def extDir = file("$path/ext").getAbsolutePath()

	if (!file(extDir).exists())
		throw new java.io.FileNotFoundException("The Alice 'ext' dir doesn't exist: $extDir")

	if (fileTree(dir: extDir, include: '*/').size() == 0)
		throw new java.io.FileNotFoundException("The Alice 'ext' dir doesn't contain any subfolders: $extDir")

/*	// Should only need this if we want to launch Alice, so omitting for now
	def exeName = (org.gradle.internal.os.OperatingSystem.current().isWindows() ? "Alice 3.exe" : "Alice3")
	if (!file("$path/$exeName").exists())
		throw new java.io.FileNotFoundException("Unable to find Alice executable: $path/$exeName")
*/

	project.ext.aliceDir = path
	project.ext.aliceLibDir = libDir
} // verifyAliceDir

/**
 * Returns the paths of all of the Jars in the Alice lib dir
 */
FileCollection aliceLibJars() {
	return fileTree(dir: aliceLibDir, include: "**/*.jar")
} // aliceLibJars

configurations {
	izpack

	provided	// This configuration is used to append the Alice library Jars to the
				// compile classpath without affecting the runtime classpath
}

// In this section you declare the dependencies for your production and test code
dependencies {
	// Determines the Alice library Jar paths
	provided aliceLibJars()

	// The production code uses the SLF4J logging API at compile time
	compile 'org.slf4j:slf4j-api:1.7.21'

	// Declare the dependency for your favourite test framework you want to use in your tests.
	// TestNG is also supported by the Gradle Test task. Just change the
	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
	// 'test.useTestNG()' to your build script.
	testCompile 'junit:junit:4.12'

	// Building izpack installer requires this
	// It provides the underlying Ant plugin and compiler used to build the installer, among other things
	izpack 'org.codehaus.izpack:izpack-ant:5.0.9'

}

// Append the Alice Jars to the compile class path
sourceSets.main.compileClasspath += configurations.provided

javadoc.classpath = sourceSets.main.compileClasspath

jar {
    manifest {
        attributes 'Implementation-Title': title,
                   'Implementation-Version': version,
                   'Built-By': System.getProperty("user.name"),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty("java.version")
    }
}

ext.izpackJar = file("${buildDir}/distributions/${name}-${version}-installer.jar")
ext.izpackProperties = [
		'app.name': project.name,
		'app.title': title,
		'app.version': version,
		'app.url': 'http://www.finch4alice.com/'
//		'app.group': project.name,
//		'app.subpath': "Finch4Alice-$version",
	]


// Ensure izPackCreateInstaller runs _after_ the jar task
tasks.izPackCreateInstaller.dependsOn(jar)

// Configuration for building the installer package using izpack
izpack {
	outputFile = izpackJar
	baseDir = file("$buildDir")	// The directory that file references in the install.xml are relative to
	compression = 'deflate'
	compressionLevel = 9
	appProperties = izpackProperties
}

launch4j {
  //mainClassName = 'com.example.myapp.Start'
  //icon = 'icons/myApp.ico'
  outfile = "${project.name}-${project.version}-setup.exe"
  copyright = "Copyright (c) 2015, Brad Fisher"
  jar = project.izpackJar
}

afterEvaluate {
	tasks.createExeWithBin.dependsOn(izPackCreateInstaller)
	tasks.createExeWithJar.dependsOn(izPackCreateInstaller)

	tasks.launch4j.doLast {
		copy {
			into "$buildDir/distributions"
			from (launch4j.outputDir) {
				include "*.exe"
			}
		}
	}

	// The following is required to ensure the doLast added above is run.
	// Without it, the launch4j task is always seen as up-to-date.
	tasks.launch4j.outputs.upToDateWhen() { return false }
}

// Configure the 'prepareGhPages' and 'publishGhPages' tasks for updating the javadoc on gh-pages
// The project property 'gitSshKey' can be specified to provide a non-standard SSH key for authentication
githubPages {
	def docVersion = project.version.replaceFirst(/-SNAPSHOT$/, '')

	if (project.hasProperty('gitSshKey'))
		System.setProperty("org.ajoberstar.grgit.auth.ssh.private", gitSshKey)

	repoUri = 'git@github.com:bradcfisher/finch4alice.git'
	targetBranch = 'gh-pages'
	deleteExistingFiles = false
	commitMessage = "Updated javadoc for version "+ docVersion +" from gradle"
	pages {
		into "api/$docVersion"
		from javadoc
	}
}

task install(dependsOn: jar) {
	// We use project.copy here instead of inheriting from the Copy task because we don't care
	// about the up-to-date checks which the Copy task will perform.  Since the target folders
	// will already have files in them, those checks are expensive and waste a lot of time during
	// the install.
	doLast {
		def os = org.gradle.internal.os.OperatingSystem.current()

		def optionsFile =
			"Alice 3.vmoptions."+
				(os.isWindows() ? "windows" : "linux")

		copy {
			into aliceDir

			if (!os.isMacOsX()) {
				from("src/main/resources") {
					include optionsFile
					rename ".*", "Alice 3.vmoptions"
				}
			}

			from("${buildDir.name}/libs") {
				into "ext/finch4alice"
				include "finch4alice-*.jar"
				rename ".*", "finch4alice.jar"
			}
		}

		if (os.isMacOsX()) {
			copy {
				into aliceDir +"/../.."

				from("src/main/resources") {
					include optionsFile
					rename ".*", "vmoptions.txt"
				}
			}
		}
	}
}

javadoc {
	def jdkSrc = (project.hasProperty('jdkSrc')
					? jdkSrc
					: "$System.env.JAVA_HOME/src")

	doFirst {
		if (!file(jdkSrc).exists()) {
			println("WARNING: Could not find JDK source at '$jdkSrc'.")
			if (file("${jdkSrc}.zip").exists()) {
				println("    The file 'src.zip' was found under the JDK home folder.")
				println("    Perhaps you need to extract it?")
				println("    (eg. unzip -d ${jdkSrc} ${jdkSrc}.zip)")
			} else {
				println("    Unable to find a 'src.zip' under the JDK home folder!")
				println("    Perhaps the JDK path was not detected correctly.")
				println("    Try specifying the path to the JDK source via the 'jdkSrc'")
				println("    property (eg. -PjdkSrc=/path/to/jdk/src).")
			}
		}
	}

	options {
		addStringOption('sourcepath', jdkSrc)
		links = [
			"http://docs.oracle.com/javase/8/docs/api/"
		]
	}
}
